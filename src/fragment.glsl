precision highp float;
uniform float t;
uniform vec2 resolution;
uniform sampler2D backBuffer;
uniform sampler2D paintTexture;
uniform vec2 point;
uniform vec2 prevPoint;
uniform float force;
uniform float value;

varying vec2 uv;

// clang-format off
// clang-format on

float Scale = 1.0;

void init(vec2 resolution)
{
    float d = max(resolution.x, resolution.y);
    Scale = ceil(d / 1024.0);
}
// vec4 rule0(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-14, -36, -22, -9) + mat4(-39, -21, -25, -24, 11, -72, 12, -11, 9, -18, -35, -101, 64, -12, 31, -112) * s + mat4(15, 36, 17, -31, 8, 61, 28, -41, -39, 4, -22, 11, -26, 12, -5, -52) * p + mat4(-23, 107, 27, -7, 74, -15, 43, -3, -7, -8, -2, 44, -63, 19, -44, 14) * abs(s) + mat4(-39, -13, -18, 7, 55, 9, 22, -16, 19, -9, 1, 18, 9, 24, 20, -12) * abs(p));
// }

// vec4 rule1(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(5, -32, -11, -1) + mat4(-36, -71, -17, -38, -44, -98, -3, 3, 27, -5, -49, -54, 64, -20, 44, -86) * s + mat4(30, 17, 18, -20, -2, 66, 30, -34, -44, -8, -54, 10, -41, 68, 7, -73) * p + mat4(-46, 106, 18, 27, 72, 0, -8, -34, -24, 4, -26, -4, -58, 16, -30, 61) * abs(s) + mat4(-45, -13, -28, 14, 58, 16, 36, -9, 28, 17, 13, -9, -21, 0, -7, 2) * abs(p));
// }
// vec4 rule3(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(0, -33, -24, 4) + mat4(-62, -44, -56, -14, -35, -122, 36, -2, 19, -25, -62, -82, 61, -2, 57, -128) * s + mat4(51, 21, 24, -45, -30, 60, 24, -43, -76, 19, -42, 33, -24, 70, 44, -68) * p + mat4(-35, 105, 24, 17, 110, -4, -16, -17, -2, 35, -40, 23, -61, 31, -21, 19) * abs(s) + mat4(-20, -21, -17, 13, 31, 15, 25, -25, -1, 18, 14, 0, -28, 22, 2, 8) * abs(p));
// }
// vec4 rule4(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-6, -47, -16, -4) + mat4(-74, -43, -61, 18, 10, -106, 17, -29, 16, -1, -70, -79, 74, 2, 74, -142) * s + mat4(18, 21, 13, -16, 9, 48, 31, -47, -77, 26, -43, 10, 25, 24, 18, -42) * p + mat4(-64, 117, 3, -22, 142, 34, -17, -34, 2, 8, -32, 22, -39, 19, -18, 18) * abs(s) + mat4(-21, -24, -21, 16, 29, 17, 22, -23, 10, 27, 39, 9, 20, 53, 16, 11) * abs(p));
// }
// vec4 rule5(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-18, -46, -11, -15) + mat4(-62, -83, -32, 43, 19, -101, 11, -17, 20, -29, -87, -59, 84, 6, 86, -156) * s + mat4(10, 29, 18, -26, 5, 61, 20, -39, -32, 24, -29, 25, 10, 2, 21, -10) * p + mat4(-77, 116, 31, -29, 139, 30, 12, -26, -42, 26, -31, -14, -33, 28, -21, 61) * abs(s) + mat4(-14, -9, -11, 3, 47, 12, 27, -23, 27, 16, 56, 13, 25, -12, 18, 8) * abs(p));
// }
vec4 rule6(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-18, -28, -23, 0) + mat4(-44, -94, -25, 7, -6, -74, 0, 12, 27, -18, -92, -84, 97, 21, 129, -146) * s + mat4(3, 32, 20, -28, -37, 60, 27, -57, -49, 22, -20, 38, 9, 0, 11, -18) * p + mat4(-54, 102, 10, -20, 138, 21, 2, -30, -62, 64, -37, 12, -22, 31, 22, 74) * abs(s) + mat4(-25, -6, 4, -20, 32, -6, 13, -16, 30, 9, 41, -3, 25, -13, 20, -13) * abs(p));
}
vec4 rule7(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-29, -34, -19, 23) + mat4(-24, -98, -28, 10, 22, -52, -12, 28, 78, -32, -67, -49, 121, 31, 112, -130) * s + mat4(16, 37, 36, -21, -55, 72, -11, -43, -44, 30, -38, 20, 4, 5, 0, 18) * p + mat4(-56, 98, 36, 18, 105, -4, 5, -21, -98, 54, -87, -13, -18, 22, 25, 106) * abs(s) + mat4(-14, -3, -5, -17, 48, -6, 9, -15, 16, -18, 72, -9, 9, 2, 15, -5) * abs(p));
}
vec4 rule8(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-32, -34, -23, 28) + mat4(-23, -98, -17, 8, 28, -49, -28, 43, 70, -40, -77, -62, 132, 28, 134, -113) * s + mat4(10, 32, 24, 9, -56, 97, -8, -15, -57, 52, -21, 34, 10, -14, 8, -2) * p + mat4(-62, 76, 18, -53, 98, -7, -9, -33, -103, 51, -88, -26, -33, 34, 66, 117) * abs(s) + mat4(-6, 0, -9, 9, 41, 1, 27, -11, 18, 3, 33, -19, 12, 7, 27, 18) * abs(p));
}
vec4 rule9(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-18, -31, -9, 34) + mat4(6, -90, -11, 4, 37, -66, -13, 36, 78, -67, -78, -70, 119, 3, 157, -129) * s + mat4(13, 3, 9, 4, -26, 101, -1, -3, -48, 49, -15, 28, -7, 5, 3, -35) * p + mat4(-46, 97, 17, -24, 100, 8, -7, -28, -103, 31, -83, -43, 1, 41, 76, 100) * abs(s) + mat4(-18, 3, -12, -3, 51, -11, 21, -35, 27, 3, 24, -31, 40, 0, 26, 9) * abs(p));
}
vec4 rule10(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-11, -44, -13, 29) + mat4(14, -111, -9, -18, 29, -82, 14, 68, 86, -67, -67, -35, 133, -8, 111, -186) * s + mat4(7, 4, 10, 6, -5, 65, 10, 8, -44, 29, -57, -16, 2, 9, 27, 18) * p + mat4(-58, 92, 23, -14, 125, 12, -21, -33, -112, 13, -95, -46, 8, 75, 95, 52) * abs(s) + mat4(-10, 20, 0, 12, 42, -14, 31, -23, 15, 16, 23, -36, 13, -18, 28, 0) * abs(p));
}
vec4 rule11(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-8, -47, 3, 33) + mat4(19, -99, 37, -40, 14, -102, -14, 67, 75, -52, -70, -41, 126, -8, 91, -194) * s + mat4(4, 29, 15, 5, -3, 46, 12, 13, -28, 46, -7, 27, 1, 29, 41, -1) * p + mat4(-68, 89, 23, -28, 125, -8, 3, -33, -121, 29, -122, -50, -27, 85, 112, 21) * abs(s) + mat4(-15, 13, -9, 9, 42, -6, 19, -16, 29, 28, 21, -14, -13, -3, 18, -23) * abs(p));
}
vec4 rule12(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-6, -39, 2, 40) + mat4(46, -101, 25, -18, 15, -104, -10, 59, 78, -36, -62, -29, 135, 35, 68, -183) * s + mat4(21, 3, 5, 7, 17, 67, 0, 44, -48, 36, -21, 23, 6, 32, 29, -11) * p + mat4(-69, 70, 42, -26, 112, -17, 18, -43, -118, 46, -114, -39, -42, 105, 138, 19) * abs(s) + mat4(-10, 32, 5, 16, 54, -13, 21, 7, 2, 28, 67, -36, -1, 19, 15, -25) * abs(p));
}
vec4 rule13(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-24, -46, -27, 47) + mat4(1, -101, 31, 35, 65, -138, 0, -2, 18, -26, -246, -66, 43, -17, -24, -240) * s + mat4(43, -4, -5, -9, 45, 39, -34, -60, 19, -2, -69, -47, 10, -12, -1, 13) * p + mat4(-27, 97, 1, -99, 132, -94, 49, -42, -138, -3, -133, 60, -152, 102, 111, 56) * abs(s) + mat4(-18, -30, -9, 16, 54, 20, -9, -9, 46, 44, 15, -14, 5, 17, -2, -20) * abs(p));
}
vec4 rule14(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-26, -42, -20, 50) + mat4(21, -84, 16, -16, 68, -140, 0, 13, 3, -25, -245, -68, 31, -16, -18, -230) * s + mat4(23, -15, 9, -15, 57, 56, -26, -66, -5, -15, -57, -52, -1, 0, 2, 2) * p + mat4(-34, 120, -7, -117, 124, -94, 58, -39, -117, 6, -141, 59, -165, 115, 123, 66) * abs(s) + mat4(-18, -18, -16, 30, 76, 28, -1, -29, 18, 49, 15, 4, 13, 16, 5, -37) * abs(p));
}
vec4 rule15(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-32, -37, -18, 48) + mat4(1, -90, 27, -25, 62, -139, -3, 14, -19, -16, -244, -74, 33, -7, -15, -235) * s + mat4(28, -13, 8, -25, 69, 50, -26, -54, -15, -13, -53, -58, 7, 14, 1, -6) * p + mat4(-63, 121, -9, -124, 118, -94, 55, -38, -118, 16, -143, 62, -170, 125, 130, 58) * abs(s) + mat4(-12, -19, -25, 29, 65, 38, -1, -33, 18, 43, 17, -3, 16, 0, -2, -19) * abs(p));
}
vec4 rule16(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-14, -17, -20, 49) + mat4(23, -89, 16, -66, 65, -124, 0, 11, -93, -18, -249, -66, 31, -10, 16, -222) * s + mat4(19, -11, -3, -5, 58, 71, -21, -22, -26, -29, -66, -19, 0, -2, 3, 1) * p + mat4(-19, 168, -9, -164, 120, -79, 58, -42, -90, -13, -163, 38, -183, 120, 125, 78) * abs(s) + mat4(-5, -13, -5, 11, 82, -10, 18, -72, 15, 32, 13, -19, 21, -22, 30, 24) * abs(p));
}
// vec4 rule4(vec4 s, vec4 p)
// {
//     return 1e-3 * (vec4(24, 12, -8, -2) + mat4(-101, 5, 9, -34, -45, -150, 1, -23, -26, 97, -33, 6, 21, 26, 33, -42) * s + mat4(-17, -75, -91, 15, 30, 82, 98, -9, -59, -58, -47, -13, -31, -7, 2, -16) * p + mat4(5, 27, 15, -17, 37, 45, 80, -52, -19, -47, -72, 78, 61, 18, 24, -4) * abs(s) + mat4(33, 6, 13, 14, -40, -20, -30, -6, -21, 8, 17, -13, -31, 3, 10, -10) * abs(p));
// }
// vec4 rule4(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-7, -40, 34, -17) + mat4(-91, -19, -43, -104, -19, -66, 43, 43, -10, -44, -82, -41, 39, -32, 62, -63) * s + mat4(31, -14, -4, -27, -28, 28, 13, 34, 52, -10, 25, -3, -24, -90, -38, -83) * p + mat4(-39, 23, -24, 23, -18, -45, -37, -38, -72, 2, -19, -45, 50, -30, 21, 22) * abs(s) + mat4(-19, 2, 3, 2, 14, -17, -4, -12, 23, 35, -19, 14, 31, 61, 22, 15) * abs(p));
// }

// vec4 rule4(vec4 s, vec4 p)
// {
//     return 1e-3 * (vec4(-15, -2, -9, 24) + mat4(-66, -52, -1, 16, 21, -88, 1, 58, -21, 36, -91, -42, 12, 15, 7, -42) * s + mat4(38, -75, -41, -62, 13, 22, 23, 35, 11, 15, 16, 34, 0, 0, 0, 0) * p + mat4(-57, 42, 5, -44, -3, -39, -76, -76, -4, -29, -36, -56, 87, -5, 61, 37) * abs(s) + mat4(-25, -6, -18, -5, -8, 13, 10, 11, -4, 6, 4, -3, 0, -1, 1, -2) * abs(p));
// }
vec4 rule2(vec4 s, vec4 p)
{
    return 1e-3 * (vec4(4, -10, -27, 18) + mat4(-67, 1, 2, 44, -13, -59, 4, 30, -1, 16, -57, 9, -10, -4, -2, -41) * s + mat4(19, -18, -1, 8, -4, 35, 8, 0, -4, -4, -1, 0, 34, 31, 21, -25) * p + mat4(4, 13, 18, -57, -79, -22, -25, 71, -12, -11, 24, 27, -17, -8, -7, 6) * abs(s) + mat4(11, 10, 4, 0, 4, 1, 2, 7, -26, -33, -15, -3, 22, 27, 20, -34) * abs(p));
}
// vec4 rule4(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-23, -7, -51, -24) + mat4(-85, 16, -29, -6, 50, -143, 38, -89, 9, 6, -55, 2, -3, 12, 11, -53) * s + mat4(-10, -25, -17, 7, 19, 32, 22, -15, 0, 0, 1, 0, -14, -14, -7, -32) * p + mat4(9, 24, 0, 42, -23, -21, -21, 47, -16, -3, 36, -4, 5, -13, -11, 49) * abs(s) + mat4(13, 1, 7, 1, -17, 2, -5, -4, -10, 0, -2, 0, 14, 7, 8, 10) * abs(p));
// }
vec4 rule4(vec4 s, vec4 p)
{
    return 1e-3 * (vec4(-17, 17, 0, -3) + mat4(-102, 25, 28, -21, -15, -32, 62, -47, 37, 31, -68, -27, -3, 18, 13, -78) * s + mat4(62, 1, 34, 18, -70, 29, -10, -10, 1, 0, 1, 1, -29, -19, -26, -65) * p + mat4(-66, -1, -38, -26, 108, -17, 66, -62, 22, -21, 10, -51, -16, -16, -16, 13) * abs(s) + mat4(20, -17, 4, 40, 1, 46, 24, -14, 9, -6, 0, 23, -5, -36, -32, -13) * abs(p));
}
vec4 rule5(vec4 s, vec4 p)
{
    return 1e-3 * (vec4(-1, 1, -5, -19) + mat4(-42, -2, 14, -10, 6, -35, 6, -23, 16, 19, -37, -10, 17, 24, 16, -33) * s + mat4(19, 1, 6, 0, -18, 3, -2, 1, 1, 0, 1, -3, 25, 24, 26, 35) * p + mat4(7, -10, -7, 1, -2, 10, 2, 3, -11, -12, 3, -28, 1, 4, 1, -21) * abs(s) + mat4(1, 1, 2, 5, 1, 2, -1, 0, -13, -17, -15, -4, 20, 22, 26, 40) * abs(p));
}
vec4 rule0(vec4 s, vec4 p)
{
    return 1e-3 * (vec4(9, 6, 23, -23) + mat4(-173, 36, -6, 8, 32, -111, 0, 65, 7, 26, -120, -61, 70, 26, 63, -34) * s + mat4(-57, -85, -63, -1, 53, 80, 57, 11, 16, 20, 17, 30, 0, 0, 0, -1) * p + mat4(84, -9, 69, 29, 16, -31, -44, -11, 21, 69, 0, -4, -80, -20, -58, 0) * abs(s) + mat4(11, 19, 39, -2, -16, -13, -30, 0, 0, -8, -11, 20, 1, -2, -10, 4) * abs(p));
}
vec4 rule3(vec4 s, vec4 p)
{
    return 1e-3 * (vec4(19, -8, 5, 10) + mat4(-61, 25, 22, -19, 11, -35, 40, -16, 14, 9, -71, -18, 22, 18, 28, -60) * s + mat4(31, -10, 21, 14, -34, 16, -19, -20, -7, -17, -8, 8, -21, -9, -8, -50) * p + mat4(10, 50, 56, -47, -44, -38, -96, 29, -27, 27, 9, 3, 5, 22, 11, 3) * abs(s) + mat4(0, 2, 6, -2, -8, -3, -11, -5, -6, 2, 4, -20, 0, -4, -8, 24) * abs(p));
}
// vec4 rule3(vec4 s, vec4 p)
// {
//     return 1e-3 * (vec4(-27, 2, 0, -4) + mat4(-40, 12, 2, 10, -9, -60, 32, 30, 13, -2, -85, 13, -26, -40, -29, -68) * s + mat4(43, 18, 38, 34, -11, 38, 1, 22, -8, -12, -9, -4, 27, 36, 30, 68) * p + mat4(20, -19, -8, -9, 17, 2, 21, 138, 13, 51, 1, -41, -17, -24, -16, -33) * abs(s) + mat4(8, 8, 7, -21, 3, 21, 13, 5, 24, 29, 21, -27, 3, -1, 3, 12) * abs(p));
// }

vec4 rule1(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(6, -6, -19, -5) + mat4(-68, 14, -51, -3, 37, -104, -37, 21, -5, 12, -43, 0, 27, 20, 35, -68) * s + mat4(-12, -33, -30, -19, 28, 34, 21, 19, -7, -46, -56, 2, 32, 13, 5, -24) * p + mat4(18, 29, 39, 58, -81, -19, -5, -24, 16, -8, 12, -39, -37, -22, -21, 21) * abs(s) + mat4(13, 8, -1, -12, -4, -1, -1, 9, -4, -18, -28, 8, -18, 5, 3, 45) * abs(p));
}
vec4 rule18(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(11, -3, 23, 22) + mat4(-27, 33, -3, -30, -42, -61, 31, 11, 2, -27, -76, -21, -7, -72, 10, -109) * s + mat4(37, -47, 10, 6, -28, 47, -9, -22, 40, -37, 24, -23, 1, -1, 1, -3) * p + mat4(19, 51, -102, -30, -52, -47, -26, 49, 9, 48, 43, -33, -25, -14, 8, 5) * abs(s) + mat4(3, 1, 38, -15, -4, -9, -37, 14, -7, 14, -30, -2, -15, -10, -3, -12) * abs(p));
}
// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-12, 28, 7, 4) + mat4(-30, -21, -52, 31, 9, -32, 22, -30, 27, 29, -60, -8, 41, 15, -15, -60) * s + mat4(78, -105, -55, 3, -11, 57, 31, 22, 9, 8, 17, 28, 0, 0, 0, -1) * p + mat4(-46, -8, -22, 28, 61, -6, 141, -4, 21, -23, -42, 0, -103, -8, -4, -40) * abs(s) + mat4(9, -92, -51, 12, 30, 4, 0, 7, 1, 12, 6, -36, 7, 17, 9, 16) * abs(p));
// }
// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(45, -17, 6, 20) + mat4(-32, 26, 7, 15, 56, -88, 52, -31, -45, 61, -47, -2, -7, 4, -2, -85) * s + mat4(61, -2, -12, -19, -70, 9, 17, 27, 1, 8, -18, 17, 28, -33, -2, -70) * p + mat4(-5, 50, 7, 59, -114, -62, -33, -49, 12, 78, 14, -10, 0, 9, 0, 31) * abs(s) + mat4(14, 4, -1, -8, -10, -5, 1, 21, -15, -2, -23, -2, -40, -18, 10, -28) * abs(p));
// }
// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(15, -30, -47, 61) + mat4(-69, 42, 46, -8, 45, -88, -14, -3, -13, -6, -64, 4, -7, -8, -6, -30) * s + mat4(24, 4, 18, 15, -12, -1, -12, -14, 6, -2, -2, 4, 0, -19, -15, 34) * p + mat4(-5, 52, 25, -185, -122, -1, 49, -26, -2, -45, 26, -15, 4, -10, -25, 5) * abs(s) + mat4(13, -7, -3, 28, -4, 0, -1, -10, 11, 18, 8, 0, 4, 23, 17, -29) * abs(p));
// }

// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-12, 21, -18, 37) + mat4(-71, -1, -21, 37, 0, -25, 7, -18, 29, -8, -35, 79, 9, -34, -77, -141) * s + mat4(11, 20, 2, -2, 4, 33, -22, 8, 7, -9, -6, -17, -13, -4, -15, 63) * p + mat4(36, -26, 16, -85, -10, 16, -9, 13, -16, -61, 8, 36, -16, -10, -113, 42) * abs(s) + mat4(6, 1, 21, 23, -26, -14, 2, -6, 12, -3, -6, -17, 6, 21, 21, -9) * abs(p));
// }
// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-2, -3, 0, 0) + mat4(-52, 28, 9, 13, -7, -53, 40, -56, 20, 5, -92, -6, 12, 9, 8, -20) * s + mat4(16, -20, 5, 22, -12, 25, -1, -24, 0, 0, 0, 0, -78, -34, -57, -65) * p + mat4(17, 3, -26, 46, -43, -11, -4, 26, 3, -29, -19, -68, -9, -12, -8, 12) * abs(s) + mat4(-4, 3, -5, 1, -1, -5, 3, -5, 1, 1, -2, -1, 53, 76, 63, -2) * abs(p));
// }

// vec4 rule18(vec4 s, vec4 p)
// {
//     return 1e-03 * (vec4(-41, -24, -11, 3) + mat4(-62, -13, 2, -5, 21, -73, 0, 1, -14, 10, -92, -1, -7, 0, -1, -51) * s + mat4(37, 19, 28, 22, -25, -7, -15, -18, 10, 9, 9, 7, -29, -27, -24, -34) * p + mat4(55, 1, -22, 29, -14, -28, -41, 56, 4, 26, 36, -60, -3, 5, 8, 15) * abs(s) + mat4(-8, -42, -25, 13, 11, 33, 23, -13, -3, -2, -1, -2, 6, 24, 23, -24) * abs(p));
// }
vec4 rule17(vec4 s, vec4 p)
{
    return 1e-03 * (vec4(-18, 16, 9, -34) + mat4(-68, 43, 47, -117, -22, -36, 44, 12, 9, 40, -43, -44, 29, 8, -30, -41) * s + mat4(59, -27, -15, 28, -43, 28, 14, -29, -42, -10, 58, -3, -22, 40, -4, -81) * p + mat4(-38, -124, -2, 76, 47, -20, -46, 72, -6, -5, -1, -20, -44, 12, 32, -11) * abs(s) + mat4(5, 14, 14, -18, -8, -6, -3, 6, 35, 33, -13, -14, 18, 31, 6, 3) * abs(p));
}

// const float ruleN = 31.0;

vec4 hash43(vec3 p)
{
    vec4 p4 = fract(vec4(p.xyzx) * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy + 33.33);
    return fract((p4.xxyz + p4.yzzw) * p4.zywx);
}

vec4 R(float x, float y) { return texture2D(backBuffer, vec2(x, y)); }

float wrap(float x, float a, float b)
{
    return x;
    return mod(x - a, b - a) + a;
}

#define PI 3.14159265359

float sdSegment(in vec2 p, in vec2 a, in vec2 b, in float R)
{
    float h = min(1.0, max(0.0, dot(p - a, b - a) / dot(b - a, b - a)));
    return length(p - a - (b - a) * h) - R;
}
void main()
{

    float aspectRatio = resolution.x / resolution.y;
    vec2 pixel = vec2(1.0) / resolution;
    vec2 scale = vec2(aspectRatio, 1.0);
    vec2 vUv = uv * 0.5 + vec2(0.5);

    init(resolution);
    vec2 fragCoord = (uv * 0.5 + vec2(0.5)) * resolution;
    vec2 iResolution = resolution;
    vec2 dp = 1.0 / iResolution.xy;
    vec2 pos = (uv * 0.5 + vec2(0.5));
    vec4 paint = texture2D(paintTexture, vec2(vUv.x, 1.0 - vUv.y));

    // if (any(greaterThan(pos*Scale, vec2(1.0))))
    // discard;

    const float tileSize = 212.0;

    vec2 sz = 1.0 / vec2(Scale);
    float x = pos.x, y = pos.y;
    vec2 lo = dp * floor(fragCoord / tileSize) * tileSize;
    vec2 hi = min(lo + tileSize * dp, sz);
    float l = wrap(x - dp.x, lo.x, hi.x), r = wrap(x + dp.x, lo.x, hi.x);
    float u = wrap(y - dp.y, lo.y, hi.y), d = wrap(y + dp.y, lo.y, hi.y);
    vec4 s = R(x, y);
    // if (s == vec4(0, 0, 0, 0) || iMouse.z>0.0 &&
    // length(iMouse.xy/Scale-fragCoord)<20.0) {
    //   fragColor = hash43(vec3(fragCoord, iFrame))-0.5;
    //   return;
    // }
    vec4 p = R(l, u) * vec4(1, 1, -1, 1) + R(x, u) * vec4(2, 2, 0, 2) + R(r, u) * vec4(1, 1, 1, 1) + R(l, y) * vec4(2, 2, -2, 0) + s * vec4(-12, -12, 0, 0) + R(r, y) * vec4(2, 2, 2, 0) + R(l, d) * vec4(1, 1, -1, -1) + R(x, d) * vec4(2, 2, 0, -2) + R(r, d) * vec4(1, 1, 1, -1);

    vec4 ds;
    vec2 rulePos = floor((pos.xy / dp) / tileSize);
    // float ri = mod(rulePos.x + rulePos.y * 4., ruleN);
    // p = p.argb;
    float ri = (paint.r * 255.) - 0.05;
    if (ri < 0.0) {
        ds = vec4(-s * .01) + (hash43(vec3(fragCoord, t)) - 0.5) * 0.05;
    } else if (ri < 1.0) {
        ds = rule0(s, p);
    } else if (ri < 2.0) {
        ds = rule1(s, p);
    } else if (ri < 3.0) {
        ds = rule2(s, p);
    } else if (ri < 4.0) {
        ds = rule3(s, p);
    } else if (ri < 5.0) {
        ds = rule4(s, p);
    } else if (ri < 6.0) {
        ds = rule5(s, p);
    } else if (ri < 7.0) {
        ds = rule6(s, p);
    } else if (ri < 8.0) {
        ds = rule7(s, p);
    } else if (ri < 9.0) {
        ds = rule8(s, p);
    } else if (ri < 10.0) {
        ds = rule9(s, p);
    } else if (ri < 11.0) {
        ds = rule10(s, p);
    } else if (ri < 12.0) {
        ds = rule11(s, p);
    } else if (ri < 13.0) {
        ds = rule12(s, p);
    } else if (ri < 14.0) {
        ds = rule13(s, p);
    } else if (ri < 15.0) {
        ds = rule14(s, p);
    } else if (ri < 16.0) {
        ds = rule15(s, p);
    } else if (ri < 17.0) {
        ds = rule16(s, p);
    } else if (ri < 18.0) {
        ds = rule17(s, p);
    } else if (ri < 19.0) {
        ds = rule18(s, p);
    } else if (ri < 20.0) {
        // ds = rule19(s, p);
    } else if (ri < 21.0) {
        // ds = rule20(s, p);
    } else if (ri < 22.0) {
        // ds = rule21(s, p);
    } else if (ri < 23.0) {
        // ds = rule22(s, p);
    } else if (ri < 24.0) {
        // ds = rule23(s, p);
    } else if (ri < 25.0) {
        // ds = rule24(s, p);
    } else if (ri < 26.0) {
        // ds = rule25(s, p);
    } else if (ri < 27.0) {
        // ds = rule26(s, p);
    } else if (ri < 28.0) {
        // ds = rule27(s, p);
    } else if (ri < 29.0) {
        // ds = rule28(s, p);
    } else if (ri < 30.0) {
        // ds = rule29(s, p);
    } else if (ri < 31.0) {
        // ds = rule30(s, p);
    } else if (ri < 32.0) {
        // ds = rule31(s, p);
    }

    // ds += vec4(-s * .01) + (hash43(vec3(fragCoord, t)) - 0.5) * 0.005;

    vec4 ncao = clamp(s + ds, -1.5, 1.5);

    vec2 npos = vUv - point.xy;
    npos.x *= aspectRatio;
    float seg = sdSegment(vUv * scale, point.xy * scale, prevPoint.xy * scale,
        0.05 * (.15));
    seg = 1.0 - (25. * seg);
    seg = max(0., seg);
    vec3 base = clamp(texture2D(backBuffer, vUv).xyz, 0., 1.0);
    float n = 0.8;
    float fill = seg;

    gl_FragColor = vec4(base + fill * value, 1.0);
    if (value > 0.5) {
        if (t == 0. || (fill * value) > 0.05) {
            gl_FragColor = hash43(vec3(fragCoord, t)) - 0.5;
        } else {
            gl_FragColor = texture2D(backBuffer, vUv);
        }
    } else {
        gl_FragColor = ncao;
        if (s == vec4(0, 0, 0, 0)) {
            gl_FragColor = hash43(vec3(fragCoord, t)) - 0.5;
        }
    }
}